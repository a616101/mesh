package com.gentics.mesh.graphql.context;

import static com.gentics.mesh.core.rest.error.Errors.missingPerm;

import java.util.function.Supplier;

import com.gentics.mesh.context.InternalActionContext;
import com.gentics.mesh.core.data.MeshCoreVertex;
import com.gentics.mesh.core.data.relationship.GraphPermission;
import com.gentics.mesh.core.rest.error.PermissionException;
import com.gentics.mesh.plugin.graphql.GraphQLPluginContext;

import io.vertx.core.json.JsonObject;

/**
 * Extended context for GraphQL handling.
 */
public interface GraphQLContext extends InternalActionContext, GraphQLPluginContext {

	/**
	 * Check whether at least one of the provided permissions is granted. Otherwise a failure {@link PermissionException} will be thrown.
	 * 
	 * @param vertex
	 *            Element to be checked
	 * @param permission
	 * @return Provided element will be returned if at least one of the permissions grants access
	 * @throws PermissionException
	 */
	default <T extends MeshCoreVertex<?, ?>> T requiresPerm(T vertex, GraphPermission... permission) {
		for (GraphPermission perm : permission) {
			if (getUser().hasPermission(vertex, perm)) {
				return vertex;
			}
		}
		throw missingPerm(vertex.getTypeInfo().getType().name().toLowerCase(), vertex.getUuid());
	}

	/**
	 * Gets a value from the context. If the value does not exist yet, the supplier will be called. The result is then stored in the context and also returned.
	 * 
	 * @param key
	 *            The key to be used for the value in the context
	 * @param supplier
	 *            Generates a value if it does not exist
	 * @return The value saved in the context or generated by the supplier
	 */
	default <T> T getOrStore(String key, Supplier<T> supplier) {
		T value = get(key);
		if (value == null) {
			value = supplier.get();
			put(key, value);
		}
		return value;
	}

	default String branchName() {
		return getBranch().getName();
	}

	default String branchUuid() {
		return getBranch().getUuid();
	}

	default String projectName() {
		return getProject().getName();
	}

	default String projectUuid() {
		return getProject().getUuid();
	}

	default JsonObject principal() {
		return getUser().principal();
	}

}
